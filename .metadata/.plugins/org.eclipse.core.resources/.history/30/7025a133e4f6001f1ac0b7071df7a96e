import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.prefs.NodeChangeEvent;

import org.apache.commons.io.FileUtils;
import org.eclipse.core.internal.localstore.Bucket.Visitor;
import org.eclipse.jdt.core.dom.AST;
import org.eclipse.jdt.core.dom.ASTParser;
import org.eclipse.jdt.core.dom.ASTVisitor;
import org.eclipse.jdt.core.dom.CompilationUnit;
import org.eclipse.jdt.core.dom.Expression;
import org.eclipse.jdt.core.dom.MethodDeclaration;
import org.eclipse.jdt.core.dom.MethodInvocation;
import org.eclipse.jdt.core.dom.NumberLiteral;
import org.eclipse.jdt.core.dom.SimpleName;
import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
import org.eclipse.jdt.core.dom.StringLiteral;
import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
import org.eclipse.jdt.core.dom.VariableDeclarationStatement;

public class JDT_Test {

	public void run() throws IOException {
		// Read source file content 
		String content = FileUtils.readFileToString(new File("./src/ContentReader.java")); // ContentReader
		
		// Set up the AST Parser
		ASTParser parser = ASTParser.newParser(AST.JLS8);
		// Give the content to the parser
		parser.setSource(content.toCharArray());
		parser.setKind(ASTParser.K_COMPILATION_UNIT);
		
		final CompilationUnit cu = (CompilationUnit) parser.createAST(null);
		
		// Store method signatures (Key: Method name, Value: Method Signature concatenated together)
	    List<String> methodDeclarations = new ArrayList<>();												// List of Method Declaration and vars declared inside its body			
	    List<String> methodSignature = new ArrayList<>();													// List of Method Signature 			 
	    Map<String, List<String>> receiverToMethodsMap = new HashMap<>();									// Map of method Invocation Receiver (Key: receiver, Value: List of Method Name)
	    Map<String, List<String>> methodToInvokedMethodsMap = new HashMap<>();								// Map of method Invocation Receiver (Key: method, Value: List of Method Name)
        
	    Map<String, List<String>> methodsCalledInBody = new HashMap<>();      
		// AST Visitor
		cu.accept(new ASTVisitor() {
			@Override
			public boolean visit(MethodDeclaration node) {													// Method Declaration eg: public void Foo() {}
				// Get Method's name, return type, start and end line		
				String methodName = node.getName().getIdentifier();											// Method's name
		        int currLine = cu.getLineNumber(node.getStartPosition()); 									// Current line number
		        int endLine = cu.getLineNumber(node.getStartPosition() + node.getLength()); 				// End line number		       
				
				// List all variables in the method's body
		        List<String> variablesInMethod = new ArrayList<>();
		        for (Object statement : node.getBody().statements()) {										// get all lines ("statement") from the method's body
		            if (statement instanceof VariableDeclarationStatement) {								// check if current line is an instance of var declaration (eg: int x = 10)
		                VariableDeclarationStatement varDecl = (VariableDeclarationStatement) statement;		
		                for (Object varFragment : varDecl.fragments()) {									// return "fragment" inside varDecl (eg: x = 10, y = 10)
		                    VariableDeclarationFragment var = (VariableDeclarationFragment) varFragment;
		                    variablesInMethod.add(var.getName().toString());
		                }
		            }
		        }
		        
		        // Add to the List
		        methodDeclarations.add("Method Declaration: " + methodName + 
		        					   "\nStart Line: " + currLine + 
		        					   "\nEnd Line: " + endLine + 
		        					   "\nVariables declared in method : " + (variablesInMethod.isEmpty() ? "No Variables" : "" + String.join(", ", variablesInMethod)) + 
		        					   "\n");
		                		        		     
                // Track methods invoked on receivers in the current method body
                // Map<String, List<String>> methodsCalledInBody = new HashMap<>();                                    
                                
                node.accept(new ASTVisitor() {  // Recursively traverse the method body
                    @Override
                    public boolean visit(MethodInvocation methodInvocation) {
                        // System.out.println("Method declaration name: " + methodName);	// debug
                        // System.out.println("Invoked Method: " + invokedMethodName);  // debug
                    	
                        // Get method invocation name and receiver                    	
                        String invokedMethodName = methodInvocation.getName().getIdentifier();                       
                        String receiver = (methodInvocation.getExpression() != null) ? methodInvocation.getExpression().toString() : "null";

                        methodsCalledInBody
                            .computeIfAbsent(receiver, key -> new ArrayList<>())
                            .add(invokedMethodName);														// eg: { "obj" -> ["foo", "bar", "baz"] } (obj.Foo, obj.bar, obj.baz)

                        return super.visit(methodInvocation);
                    }
                });
                
                // Now store these methods in the methodToInvokedMethodsMap, associating the method with the list of invoked methods on the receiver
                List<String> invokedMethodsOnReceiver = new ArrayList<>();
                for (Map.Entry<String, List<String>> entry : methodsCalledInBody.entrySet()) {
                    invokedMethodsOnReceiver.addAll(entry.getValue());										// Add all of the List<String> from methodsCalledInBody
                }
                methodToInvokedMethodsMap.put(methodName, invokedMethodsOnReceiver);
                
		        return super.visit(node);
			}
			
			@Override
			public boolean visit(MethodInvocation node) {													// Method Invocation eg: Foo() or println("")
				String methodName = node.getName().getIdentifier();											// Method's name
				// String receiver = node.getExpression().toString();										// Expression of the method (eg: obj.Foo, obj is the receiver)
				int currLine = cu.getLineNumber(node.getStartPosition()); 									// Current line number
				int paramSize = node.arguments().size();
				
		        // Get each Method Invocation arguments 
		        List<String> paramTypes = new ArrayList<>();
		        for (Object arg : node.arguments()) {														// Argument's list of the methods
		            if (arg instanceof Expression) {														// check argument is an instance of an Expression (eg: it does sthing, a + b, dont need this part really)
		                Expression expr = (Expression) arg;
		                paramTypes.add(expr.toString());		
		            }
		        }

		        // Add to the List
		        methodSignature.add("Method Signature: " + methodName + 
		        					"\nStart Line: " + currLine + 
		        					"\nNumber of parameters: " + paramSize + 
		        					"\nParameters list: " + (paramTypes.isEmpty() ? "" : "" + String.join(", ", paramTypes)) + 
		        					"\n");		        
		     
		        
//		        /* Question 3 part */
//		        // Capture receiver of each Method Invocation
//		        if (node.getExpression() != null) {																// Check receiver (eg: object.method(), object is the receiver)
//		            String receiver = node.getExpression().toString();
//		            receiverToMethodsMap
//		            	.computeIfAbsent(receiver, key -> new ArrayList<>())
//		            	.add(methodName);																		// eg: { "obj" -> ["foo", "bar", "baz"] } (obj.Foo, obj.bar, obj.baz)
//		        }
//
//		        // Track method if the receiver is a Simple Name, not something complex (eg: Method call chain, Field access, Array access, Type reference, Cast expressions,...)
//		        if (node.getExpression() != null && node.getExpression() instanceof SimpleName) {				// Check if receiver is a SimpleName (eg: var, method, parameter names..._
//		            String receiver2 = node.getExpression().toString();											// Filtered Receiver
//		            List<String> methodsUsingReceiver = receiverToMethodsMap.get(receiver2);
//		            if (methodsUsingReceiver != null) {
//		                methodToInvokedMethodsMap.put(methodName, methodsUsingReceiver);						// eg: { "foo" -> ["foo", "bar", "baz"] } (obj.Foo, obj.bar, obj.baz)
//		            }
//		        }
		        
				return super.visit(node);
			}
			
		});	
		
		
	    // Testing
		/* Question 1*/
//	    System.out.println("First Question");
//	    for (String declaration : methodDeclarations) {
//	        System.out.println(declaration);	     
//	    }
	    
	    /* Question 2*/
//	    System.out.println("Second Question");
//	    for (String signature : methodSignature) {
//	    	System.out.println(signature);	     
//	    }
		
		/* Question 3*/
	    System.out.println("Method Arguments:");
	    for (Map.Entry<String, List<String>> entry : methodsCalledInBody.entrySet()) {
	        System.out.println("Method: " + entry.getKey() + " -> Methods using receiver: " + entry.getValue());
	    }
	    
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		JDT_Test driver = new JDT_Test();
		try {
			driver.run();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
